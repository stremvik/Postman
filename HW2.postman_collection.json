{
	"info": {
		"_postman_id": "2ed76c62-d11c-418a-a27e-ff0ec0f308f0",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20256721"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Check that correct string comes to the body\", function () {\r",
							"    pm.response.to.have.body('This is the first responce from server!ss');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Viktoryia\");\r",
							"    });\r",
							"//  5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"37\");\r",
							"    });\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(100500);\r",
							"    });\r",
							"    // 7. Спарсить request.\r",
							"let req = request.data;\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"    // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"    });\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"    });\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"   pm.expect(jsonData.salary).to.eql(parseInt(req.salary));\r",
							"    });\r",
							"//   11. Вывести в консоль параметр family из response.\r",
							"console.log('family from response',jsonData.family)  \r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary_1.5\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary * 4);\r",
							"});\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Viktoryia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Viktoryia",
							"disabled": true
						},
						{
							"key": "age ",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "100500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req  = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"    });\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"    });\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) \r",
							" pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(req.salary));\r",
							"    });\r",
							"//  8. Вывести в консоль параметр family из response.   \r",
							"console.log('family from response',jsonData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog include name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog`s name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog`s age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Viktoryia&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Viktoryia"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"    });\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"   pm.expect(jsonData.age).to.eql(parseInt(req.age));\r",
							"    }); \r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log('salary from request',req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log('salary from response',jsonData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('salary from response',jsonData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary from response',jsonData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary from response',jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0 salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 salary\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2 salary\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// Enviroment-Add-Variable-name\r",
							"// 16. Создать в окружении переменную age\r",
							"// Variable-age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Variable-salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age) ;\r",
							"// 20. Передать в окружение переменную salary\r",
							" pm.environment.set(\"salary\", jsonData.salary[0]) ;\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let salary_lenght = jsonData.salary_lenght;\r",
							"for(let i = 0; i<=2; i++) {\r",
							"console.log(jsonData.salary[i]);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Viktoryia&age=37&salary=100500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Viktoryia"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "100500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// body-form-data - key=salary, value={{salary}}\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// body-form-data - key=age -  value = {{age}}\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// body-form-data -key= name - value = {{name}}\r",
							"// 4. Отправить запрос\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(jsonData).have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary from request\", function () \r",
							"{\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"    });\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"    });\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"    });\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"    });\r",
							"// // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"   pm.test(\"qa_salary_after_3.5_year = salary*3.8 from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(Number(req.salary * 3.8));\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"person.u_name[1] = salary_from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"    });\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age = age from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData.person.u_age).to.eql(parseInt(req.age));\r",
							"    });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2 from request\",function () \r",
							"{\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"    });\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						         " let person_1 = jsonData.person
                                                         " for(key in person_1) {
                                                          "console.log(key,":",person_1[key]);
                                                          }
					],
											"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}
